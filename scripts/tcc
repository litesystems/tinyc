#!/usr/bin/python
# -*- coding: utf-8 -*-

from __future__ import print_function, unicode_literals
import argparse
import logging
import os
import sys

from tinyc.compiler import Compiler


def get_logger(args):
    level = logging.WARNING
    if args.debug:
        level = logging.DEBUG
    elif args.verbose:
        level = logging.INFO

    logger = logging.getLogger()
    logger.setLevel(level)

    handler = logging.StreamHandler()
    handler.setLevel(level)

    formatter = logging.Formatter('%(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    return logger


def main(args):
    logger = get_logger(args)

    data = args.input.read()
    args.input.close()

    kwargs = {
        'ast': args.ast,
        'debug': args.debug,
        'format': args.f,
        'optimization': args.O,
        'verbose': args.verbose
    }

    compiler = Compiler(**kwargs)
    result = compiler.compile(data)

    if 'asm' in result:
        # コード出力処理
        if args.o is None:
            out_filename = os.path.splitext(args.input.name)[0] + '.nasm'
            args.o = open(out_filename, 'w')

        args.o.write(result['asm'])
        args.o.close()

    if result['errors'] > 0:
        logging.error('Error: {0}'.format(result['errors']))
    if result['warnings'] > 0:
        logger.warning('Warning: {0}'.format(result['warnings']))
    if result['optimized'] > 0:
        logger.info('Optimized: {0}'.format(result['optimized']))

    # 抽象構文木出力処理
    if args.ast:
        ast_filename = os.path.splitext(args.input.name)[0] + '.ast'
        with open(ast_filename, 'w') as ast_file:
            ast_file.write(result['ast'])


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='TinyC compiler')
    parser.add_argument('-O', choices=range(2), default=1, type=int,
                        help='Optimization level')
    parser.add_argument('-d', '--debug', action='store_true', default=False,
                        help='Debug mode')
    parser.add_argument('-f', choices=['elf', 'macho'], type=str,
                        default='macho', help='Select an output format')
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
                        help='Verbose mode')
    parser.add_argument('--ast', action='store_true', default=False,
                        help='Export AST file for debugging')
    parser.add_argument('-o', type=argparse.FileType('w'), metavar='file',
                        default=None, help='Write outout to <file>')
    parser.add_argument('input', type=argparse.FileType('r'), default=sys.stdin)
    args = parser.parse_args()
    main(args)
